name: Deploy Databricks Bundle

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DATABRICKS_BUNDLE_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Bundle
    environment: Prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Databricks CLI
      uses: databricks/setup-cli@main
      with:
        databricks-cli-version: latest

    # - name: Configure Databricks CLI with Service Principal
    #   env:
    #     DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
    #     DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
    #     DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
    #   run: |
    #     echo "Configuring Databricks CLI with Service Principal authentication"
    #     databricks auth login --host $DATABRICKS_HOST \
    #       --client-id $DATABRICKS_CLIENT_ID \
    #       --client-secret $DATABRICKS_CLIENT_SECRET

    - name: Configure Databricks CLI
      run: |
        mkdir -p ~/.databricks
        cat <<EOF > ~/.databricks/config
        [profiles.prod]
        host = "${DATABRICKS_HOST}"
        token = "${DATABRICKS_TOKEN}"
        EOF
        cat ~/.databricks/config
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        
    - name: Validate bundle configuration
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        databricks auth env --profile prod
        databricks bundle validate --target $DATABRICKS_BUNDLE_ENV
     

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Databricks
    needs: validate
    environment: Prod
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Databricks CLI
      uses: databricks/setup-cli@main
      with:
        databricks-cli-version: latest

    - name: Configure Databricks CLI with Service Principal
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
      run: |
        echo "Configuring Databricks CLI with Service Principal authentication"
        databricks auth login --host $DATABRICKS_HOST \
          --client-id $DATABRICKS_CLIENT_ID \
          --client-secret $DATABRICKS_CLIENT_SECRET

    - name: Deploy bundle
      run: |
        echo "Deploying to environment: $DATABRICKS_BUNDLE_ENV"
        databricks bundle deploy --target $DATABRICKS_BUNDLE_ENV

    - name: Run sales analytics job (dev only)
      if: env.DATABRICKS_BUNDLE_ENV == 'dev'
      run: |
        echo "Running sales analytics job in dev environment"
        databricks bundle run sales_analytics_job --target dev --wait

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: deploy
    environment: Prod
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Databricks CLI
      uses: databricks/setup-cli@main

    - name: Configure Databricks CLI with Service Principal
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
        DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
      run: |
        databricks auth login --host $DATABRICKS_HOST \
          --client-id $DATABRICKS_CLIENT_ID \
          --client-secret $DATABRICKS_CLIENT_SECRET

    - name: Run data quality checks
      run: |
        echo "Running basic data quality checks"
        # You can add more sophisticated testing here
        databricks bundle run sales_analytics_job --target dev --wait
        echo "Data quality checks completed"